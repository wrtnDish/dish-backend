/**
 * @packageDocumentation
 * @module api.functional.restaurant
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IRestaurant } from "../../structures/restaurant/IRestaurant";

/**
 * 맛집 검색 API - MUST CALL when users ask about restaurants!
 *
 * ALWAYS USE THIS for ANY food/restaurant questions including:
 * - University restaurants (한밭대, 대학교, 캠퍼스 etc.)
 * - Regional food searches (대전, 서울, 부산 etc.)
 * - Food type searches (한식, 치킨, 카페 etc.)
 * - General restaurant recommendations
 *
 * PERFECT for queries like:
 * - "한밭대 맛집 알려줘" (Hanbat University restaurants)
 * - "한밭대학교 근처 식당" (Near Hanbat University)
 * - "대전 맛집" (Daejeon restaurants)
 * - "대학 앞 치킨집" (Chicken places near university)
 * - "캠퍼스 카페" (Campus cafes)
 * - "뭐 먹을까" (What should I eat)
 *
 * NO NEED to ask for clarification - just call with the user's exact question!
 *
 * @param input Query parameters containing search text
 * @returns Real restaurant data from Naver Local API
 *
 * @controller RestaurantController.find
 * @path GET /restaurant/find
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function find(
  connection: IConnection,
  input: find.Query,
): Promise<find.Output> {
  return true === connection.simulate
    ? find.simulate(connection, input)
    : PlainFetcher.fetch(connection, {
        ...find.METADATA,
        template: find.METADATA.path,
        path: find.path(input),
      });
}
export namespace find {
  export type Query = IRestaurant.IRequest;
  export type Output = any;

  export const METADATA = {
    method: "GET",
    path: "/restaurant/find",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = (input: Query) => {
    const variables: URLSearchParams = new URLSearchParams();
    for (const [key, value] of Object.entries(input as any))
      if (undefined === value) continue;
      else if (Array.isArray(value))
        value.forEach((elem: any) => variables.append(key, String(elem)));
      else variables.set(key, String(value));
    const location: string = "/restaurant/find";
    return 0 === variables.size
      ? location
      : `${location}?${variables.toString()}`;
  };
  export const random = (): any => typia.random<any>();
  export const simulate = (connection: IConnection, input: Query): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(input),
      contentType: "application/json",
    });
    assert.query(() => typia.assert(input));
    return random();
  };
}
