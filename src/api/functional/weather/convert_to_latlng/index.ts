/**
 * @packageDocumentation
 * @module api.functional.weather.convert_to_latlng
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  IGrid,
  ILatLng,
} from "../../../structures/weather/IWeatherForecast";

/**
 * 격자 좌표를 위경도 좌표로 변환
 *
 * @param grid - 변환할 격자 좌표
 * @description 기상청 격자 좌표(nx, ny)를 WGS84 좌표계의 위도/경도로 역변환합니다.
 *              격자 좌표 기반 데이터를 지도에 표시하거나 다른 좌표계와 연동할 때 사용합니다.
 *
 *              **사용 목적:**
 *              - 기상청 격자 데이터를 지도 위에 시각화
 *              - GPS 좌표계와 기상 격자 좌표계 간 상호 변환
 *              - 격자 좌표 기반 데이터베이스의 지리적 위치 확인
 *
 *              **변환 특성:**
 *              - 격자의 중심점 좌표로 변환
 *              - 실제 격자 영역은 약 5km × 5km 크기
 *              - 역변환 후 재변환 시 원본 격자 좌표 복원 가능
 * @summary 격자좌표를 위경도로 변환
 * @tag Weather
 * @returns 변환된 위경도 좌표
 * @returns returns.lat - 위도 (도 단위)
 * @returns returns.lng - 경도 (도 단위)
 * @throws {400} 격자 좌표가 유효 범위를 벗어난 경우
 * @throws {500} 좌표 변환 계산 오류
 * @example ```typescript
 *          // 주요 도시의 격자 좌표를 위경도로 변환
 *          const grids = [
 *          { name: "서울", x: 60, y: 127 },
 *          { name: "부산", x: 98, y: 76 },
 *          { name: "제주", x: 52, y: 38 }
 *          ];
 *
 *          for (const grid of grids) {
 *          const response = await fetch('/weather/convert-to-latlng', {
 *          method: 'POST',
 *          headers: { 'Content-Type': 'application/json' },
 *          body: JSON.stringify({ x: grid.x, y: grid.y })
 *          });
 *          const coords = await response.json();
 *          console.log(`${grid.name}: (${coords.lat}, ${coords.lng})`);
 *          }
 *          ```
 *
 * @controller WeatherController.convertToLatLng
 * @path POST /weather/convert-to-latlng
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function convertToLatLng(
  connection: IConnection,
  grid: convertToLatLng.Body,
): Promise<convertToLatLng.Output> {
  return true === connection.simulate
    ? convertToLatLng.simulate(connection, grid)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...convertToLatLng.METADATA,
          template: convertToLatLng.METADATA.path,
          path: convertToLatLng.path(),
        },
        grid,
      );
}
export namespace convertToLatLng {
  export type Body = IGrid;
  export type Output = ILatLng;

  export const METADATA = {
    method: "POST",
    path: "/weather/convert-to-latlng",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/weather/convert-to-latlng";
  export const random = (): ILatLng => typia.random<ILatLng>();
  export const simulate = (connection: IConnection, grid: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(grid));
    return random();
  };
}
