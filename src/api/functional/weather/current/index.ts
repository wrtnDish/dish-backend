/**
 * @packageDocumentation
 * @module api.functional.weather.current
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  ILatLng,
  ISimpleWeatherResponse,
} from "../../../structures/weather/IWeatherForecast";

/**
 * 간단한 현재 날씨 정보 조회
 *
 * @param location - 조회할 위치의 위경도 좌표
 * @description 프론트엔드에서 사용하기 쉽도록 정제된 현재 날씨 정보만 반환합니다.
 *              전체 6시간 예보 데이터 대신 현재 시간(가장 가까운 예보 시간)의 데이터만 추출하여
 *              생활에 필요한 핵심 정보 위주로 가공해서 제공합니다.
 *
 *              **특징:**
 *              - 현재 시간 기준 1시간 데이터만 반환
 *              - 체감 온도, 옷차림 조언, 우산 필요 여부 등 실생활 정보 포함
 *              - 외출 적합도 점수 (1-5점) 제공
 *              - 간결한 날씨 요약 메시지
 *              - 빠른 응답 속도 (최소한의 데이터만 요청)
 *
 *              **응답 데이터:**
 *              - 현재 기온, 체감온도, 하늘상태
 *              - 강수 정보 (형태, 양, 상태)
 *              - 바람 정보 (속도, 방향, 설명)
 *              - 생활 조언 (외출 적합도, 우산 필요성, 옷차림)
 *              - 종합 날씨 요약
 * @summary 간단한 현재 날씨 조회
 * @tag Weather
 * @returns 정제된 현재 날씨 정보
 * @returns returns.current - 현재 날씨 상세 정보
 * @returns returns.advice - 생활 지수 및 조언
 * @returns returns.metadata - 조회 결과 메타데이터
 * @throws {400} 좌표가 대한민국 영역을 벗어난 경우
 * @throws {500} 기상청 API 호출 실패 등 내부 서버 오류
 * @example ```typescript
 *          // 현재 날씨 간단 조회
 *          const response = await fetch('/weather/current', {
 *          method: 'POST',
 *          headers: { 'Content-Type': 'application/json' },
 *          body: JSON.stringify({
 *          lat: 37.5663,
 *          lng: 126.9779
 *          })
 *          });
 *
 *          const weather = await response.json();
 *          console.log(weather.current.summary); // "흐리고 비, 27°C"
 *          console.log(weather.advice.message); // "우산을 준비하세요"
 *          console.log(weather.advice.clothing); // "가벼운 긴팔 + 우산"
 *          ```
 * @example ```typescript
 *          // 외출 적합도 확인
 *          const weather = await getCurrentWeather({ lat: 35.1796, lng: 129.0756 });
 *
 *          if (weather.advice.outdoorActivity >= 4) {
 *          console.log('외출하기 좋은 날씨입니다!');
 *          } else if (weather.advice.umbrella) {
 *          console.log('우산을 챙기세요.');
 *          }
 *          ```
 *
 * @controller WeatherController.getCurrentWeather
 * @path POST /weather/current
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getCurrentWeather(
  connection: IConnection,
  location: getCurrentWeather.Body,
): Promise<getCurrentWeather.Output> {
  return true === connection.simulate
    ? getCurrentWeather.simulate(connection, location)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getCurrentWeather.METADATA,
          template: getCurrentWeather.METADATA.path,
          path: getCurrentWeather.path(),
        },
        location,
      );
}
export namespace getCurrentWeather {
  export type Body = ILatLng;
  export type Output = ISimpleWeatherResponse;

  export const METADATA = {
    method: "POST",
    path: "/weather/current",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/weather/current";
  export const random = (): ISimpleWeatherResponse =>
    typia.random<ISimpleWeatherResponse>();
  export const simulate = (connection: IConnection, location: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(location));
    return random();
  };
}
