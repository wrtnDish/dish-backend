/**
 * @packageDocumentation
 * @module api.functional.weather.convert_to_grid
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  IGrid,
  ILatLng,
} from "../../../structures/weather/IWeatherForecast";

/**
 * 위경도 좌표를 격자 좌표로 변환
 *
 * @param location - 변환할 위경도 좌표
 * @description 위도와 경도를 기상청에서 사용하는 Lambert Conformal Conic Projection 격자 좌표로 변환합니다.
 *              이 변환된 좌표는 기상청 API 호출 시 nx, ny 파라미터로 사용됩니다.
 *
 *              **변환 원리:**
 *              - Lambert Conformal Conic Projection (람베르트 정각원추도법) 사용
 *              - 지구의 곡면을 평면으로 투영하여 격자 좌표계 구성
 *              - 대한민국 지역에 최적화된 투영 파라미터 사용
 *
 *              **활용 사례:**
 *              - 날씨 API 호출 전 좌표 미리 변환하여 저장
 *              - 지도 서비스와 기상 서비스 간 좌표 연동
 *              - 대량의 지점에 대한 격자 좌표 일괄 변환
 *
 *              **정확도:**
 *              - 변환 후 역변환 시 오차 ±0.001도 이내
 *              - 기상청 공식 변환 알고리즘과 동일한 결과
 * @summary 위경도를 격자좌표로 변환
 * @tag Weather
 * @returns 변환된 격자 좌표 정보
 * @returns returns.x - X축 격자 좌표 (1~149)
 * @returns returns.y - Y축 격자 좌표 (1~253)
 * @throws {400} 좌표가 대한민국 영역을 벗어난 경우
 * @throws {500} 좌표 변환 계산 오류
 * @example ```typescript
 *          // 여러 지역의 격자 좌표 일괄 변환
 *          const locations = [
 *          { name: "서울시청", lat: 37.5663, lng: 126.9779 },
 *          { name: "부산시청", lat: 35.1796, lng: 129.0756 },
 *          { name: "제주공항", lat: 33.5067, lng: 126.4919 }
 *          ];
 *
 *          for (const loc of locations) {
 *          const response = await fetch('/weather/convert-to-grid', {
 *          method: 'POST',
 *          headers: { 'Content-Type': 'application/json' },
 *          body: JSON.stringify({ lat: loc.lat, lng: loc.lng })
 *          });
 *          const grid = await response.json();
 *          console.log(`${loc.name}: (${grid.x}, ${grid.y})`);
 *          }
 *          ```
 *
 * @controller WeatherController.convertToGrid
 * @path POST /weather/convert-to-grid
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function convertToGrid(
  connection: IConnection,
  location: convertToGrid.Body,
): Promise<convertToGrid.Output> {
  return true === connection.simulate
    ? convertToGrid.simulate(connection, location)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...convertToGrid.METADATA,
          template: convertToGrid.METADATA.path,
          path: convertToGrid.path(),
        },
        location,
      );
}
export namespace convertToGrid {
  export type Body = ILatLng;
  export type Output = IGrid;

  export const METADATA = {
    method: "POST",
    path: "/weather/convert-to-grid",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/weather/convert-to-grid";
  export const random = (): IGrid => typia.random<IGrid>();
  export const simulate = (connection: IConnection, location: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(location));
    return random();
  };
}
