/**
 * @packageDocumentation
 * @module api.functional.weather.forecast
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  IWeatherForecastRequest,
  IWeatherForecastResponse,
} from "../../../structures/weather/IWeatherForecast";

/**
 * 위경도 기반 날씨 예보 조회
 *
 * @param request - 날씨 조회 요청 정보
 * @description 위도와 경도 좌표를 입력받아 해당 지역의 초단기 기상예보 정보를 조회합니다.
 *
 *              **처리 과정:**
 *              1. 입력받은 위경도를 기상청 격자 좌표로 자동 변환
 *              2. 현재 시각 기준으로 조회 가능한 최신 발표시각 계산
 *              3. 기상청 API 호출하여 원본 데이터 수집
 *              4. 사용자 친화적 형태로 데이터 파싱 및 구조화
 *              5. 시간별 상세 기상 정보 제공
 *
 *              **응답 데이터 구성:**
 *              - 요청 위치 정보 및 변환된 격자 좌표
 *              - 예보 발표 기준 일시
 *              - 향후 6시간의 시간별 상세 기상 정보
 *              - API 호출 메타데이터
 *
 *              **주의사항:**
 *              - 대한민국 영역만 지원 (위도: 33.0~38.9, 경도: 124.0~132.0)
 *              - 매시 45분 이후에만 해당 시간 발표분 조회 가능
 *              - 북한 및 국외 지역은 지원하지 않음
 * @summary 위경도로 날씨 예보 조회
 * @tag Weather
 * @returns 파싱된 날씨 예보 정보
 * @returns returns.location - 요청한 위경도 좌표
 * @returns returns.gridCoordinates - 변환된 격자 좌표 (nx, ny)
 * @returns returns.baseInfo - 예보 발표 기준 정보
 * @returns returns.hourlyForecasts - 시간별 상세 기상 정보 배열
 * @returns returns.metadata - API 처리 결과 메타데이터
 * @throws {400} 잘못된 요청 파라미터 (좌표 범위 초과, 잘못된 날짜/시간 형식 등)
 * @throws {500} 기상청 API 호출 실패, 데이터 파싱 오류 등 내부 서버 오류
 * @throws {503} 기상청 서비스 일시 중단 또는 과부하
 * @example ```typescript
 *          // 서울시청 위치의 날씨 정보 조회
 *          const response = await fetch('/weather/forecast', {
 *          method: 'POST',
 *          headers: { 'Content-Type': 'application/json' },
 *          body: JSON.stringify({
 *          location: { lat: 37.5663, lng: 126.9779 }
 *          })
 *          });
 *
 *          const weather = await response.json();
 *          console.log(`현재 기온: ${weather.hourlyForecasts[0].temperature}°C`);
 *          console.log(`하늘상태: ${weather.hourlyForecasts[0].sky.description}`);
 *          ```
 * @example ```typescript
 *          // 특정 발표시각의 예보 조회
 *          const response = await fetch('/weather/forecast', {
 *          method: 'POST',
 *          headers: { 'Content-Type': 'application/json' },
 *          body: JSON.stringify({
 *          location: { lat: 35.1796, lng: 129.0756 }, // 부산
 *          baseDate: "20231215",
 *          baseTime: "1430",
 *          numOfRows: 30
 *          })
 *          });
 *          ```
 *
 * @controller WeatherController.getWeatherForecast
 * @path POST /weather/forecast
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getWeatherForecast(
  connection: IConnection,
  request: getWeatherForecast.Body,
): Promise<getWeatherForecast.Output> {
  return true === connection.simulate
    ? getWeatherForecast.simulate(connection, request)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getWeatherForecast.METADATA,
          template: getWeatherForecast.METADATA.path,
          path: getWeatherForecast.path(),
        },
        request,
      );
}
export namespace getWeatherForecast {
  export type Body = IWeatherForecastRequest;
  export type Output = IWeatherForecastResponse;

  export const METADATA = {
    method: "POST",
    path: "/weather/forecast",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/weather/forecast";
  export const random = (): IWeatherForecastResponse =>
    typia.random<IWeatherForecastResponse>();
  export const simulate = (connection: IConnection, request: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(request));
    return random();
  };
}
