/**
 * @packageDocumentation
 * @module api.functional.food.analyze
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  IHungerAnalysisRequest,
  IHungerAnalysisResponse,
} from "../../../../controllers/food/FoodController";

/**
 * 포만감 상태 분석 API
 *
 * @param params - 분석 요청 파라미터
 * @description 사용자의 포만감 수준을 받아서 현재 상태를 분석하고 일반적인 조언을 제공하는 API입니다.
 *              음식 추천보다는 단순히 배고픔 상태만 확인하고 싶을 때 사용합니다.
 * @returns 포만감 분석 결과
 * @summary 포만감 상태 분석
 * @tag Food
 *
 * @controller FoodController.analyzeHungerLevel
 * @path POST /food/analyze
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function analyzeHungerLevel(
  connection: IConnection,
  params: analyzeHungerLevel.Body,
): Promise<analyzeHungerLevel.Output> {
  return true === connection.simulate
    ? analyzeHungerLevel.simulate(connection, params)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...analyzeHungerLevel.METADATA,
          template: analyzeHungerLevel.METADATA.path,
          path: analyzeHungerLevel.path(),
        },
        params,
      );
}
export namespace analyzeHungerLevel {
  export type Body = IHungerAnalysisRequest;
  export type Output = IHungerAnalysisResponse;

  export const METADATA = {
    method: "POST",
    path: "/food/analyze",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/food/analyze";
  export const random = (): IHungerAnalysisResponse =>
    typia.random<IHungerAnalysisResponse>();
  export const simulate = (connection: IConnection, params: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(params));
    return random();
  };
}
