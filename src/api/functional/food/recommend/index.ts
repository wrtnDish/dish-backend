/**
 * @packageDocumentation
 * @module api.functional.food.recommend
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type {
  IFoodRecommendationRequest,
  IFoodRecommendationResponse,
} from "../../../structures/food/IFoodRecommendation";

/**
 * 포만감 기반 음식 추천 API
 *
 * @param request - 음식 추천 요청 정보
 * @description 사용자의 현재 포만감 상태를 받아서 적절한 음식을 추천하는 HTTP API입니다.
 *              클라이언트에서 POST 요청으로 포만감 레벨과 선호도를 전송하면
 *              맞춤형 음식 추천 결과를 반환합니다.
 * @returns 포만감 상태에 따른 음식 추천 및 조언
 * @example ```typescript
 *          // HTTP POST /food/recommend
 *          const response = await fetch('/food/recommend', {
 *          method: 'POST',
 *          headers: { 'Content-Type': 'application/json' },
 *          body: JSON.stringify({
 *          fullness: 3,
 *          preferences: "한식 좋아해"
 *          })
 *          });
 *          const recommendation = await response.json();
 *          ```
 * @summary 포만감 기반 음식 추천
 * @tag Food
 *
 * @controller FoodController.recommendFood
 * @path POST /food/recommend
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function recommendFood(
  connection: IConnection,
  request: recommendFood.Body,
): Promise<recommendFood.Output> {
  return true === connection.simulate
    ? recommendFood.simulate(connection, request)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...recommendFood.METADATA,
          template: recommendFood.METADATA.path,
          path: recommendFood.path(),
        },
        request,
      );
}
export namespace recommendFood {
  export type Body = IFoodRecommendationRequest;
  export type Output = IFoodRecommendationResponse;

  export const METADATA = {
    method: "POST",
    path: "/food/recommend",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/food/recommend";
  export const random = (): IFoodRecommendationResponse =>
    typia.random<IFoodRecommendationResponse>();
  export const simulate = (connection: IConnection, request: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(request));
    return random();
  };
}
