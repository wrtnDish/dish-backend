/**
 * @packageDocumentation
 * @module api.functional.food.weather_conditions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IWeatherConditions } from "../../../structures/food/IFoodCategory";
import type { ILatLng } from "../../../structures/weather/IWeatherForecast";

/**
 * 특정 위치의 날씨 조건 조회
 *
 * @param location - 위경도 좌표
 * @description 음식 평가 없이 특정 위치의 날씨 조건만 조회합니다.
 *              날씨 데이터를 음식 추천용으로 분류한 결과를 반환합니다.
 *
 *              **조회 정보:**
 *              - 온도 분류 (hot/moderate/cold)
 *              - 습도 분류 (high/moderate/low)
 *              - 실제 기온 및 습도 값
 * @summary 위치별 날씨 조건 조회
 * @tag Food
 * @returns 음식 추천용 날씨 조건
 * @throws {400} 좌표가 대한민국 영역을 벗어난 경우
 * @throws {500} 날씨 조회 실패
 * @example ```typescript
 *          // 제주도 날씨 조건 조회
 *          const weather = await fetch('/food/weather-conditions', {
 *          method: 'POST',
 *          headers: { 'Content-Type': 'application/json' },
 *          body: JSON.stringify({
 *          lat: 33.4996,
 *          lng: 126.5312
 *          })
 *          }).then(r => r.json());
 *
 *          console.log(`온도 분류: ${weather.temperature}`);
 *          console.log(`습도 분류: ${weather.humidity}`);
 *          console.log(`실제 기온: ${weather.actualTemperature}°C`);
 *          ```
 *
 * @controller FoodEvaluationController.getWeatherConditions
 * @path POST /food/weather-conditions
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getWeatherConditions(
  connection: IConnection,
  location: getWeatherConditions.Body,
): Promise<getWeatherConditions.Output> {
  return true === connection.simulate
    ? getWeatherConditions.simulate(connection, location)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getWeatherConditions.METADATA,
          template: getWeatherConditions.METADATA.path,
          path: getWeatherConditions.path(),
        },
        location,
      );
}
export namespace getWeatherConditions {
  export type Body = ILatLng;
  export type Output = IWeatherConditions;

  export const METADATA = {
    method: "POST",
    path: "/food/weather-conditions",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/food/weather-conditions";
  export const random = (): IWeatherConditions =>
    typia.random<IWeatherConditions>();
  export const simulate = (connection: IConnection, location: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(location));
    return random();
  };
}
