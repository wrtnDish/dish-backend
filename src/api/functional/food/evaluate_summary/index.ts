/**
 * @packageDocumentation
 * @module api.functional.food.evaluate_summary
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { NestiaSimulator } from "@nestia/fetcher/lib/NestiaSimulator";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";

import type { IFoodEvaluationRequest } from "../../../structures/food/IFoodCategory";

/**
 * 음식 평가 결과 요약
 *
 * @param request - 평가 요청 정보 (evaluate API와 동일)
 * @description 음식 평가 결과를 사용자 친화적인 텍스트로 요약합니다.
 *              현재 날씨 정보와 추천 음식을 포함한 한 줄 요약을 제공합니다.
 * @summary 음식 평가 결과 요약
 * @tag Food
 * @returns 평가 결과 요약 텍스트
 * @example ```typescript
 *          // 평가 결과 요약 조회
 *          const summary = await fetch('/food/evaluate-summary', {
 *          method: 'POST',
 *          headers: { 'Content-Type': 'application/json' },
 *          body: JSON.stringify({
 *          location: { lat: 37.5663, lng: 126.9779 }
 *          })
 *          }).then(r => r.json());
 *
 *          console.log(summary);
 *          // 예: "현재 날씨(더운 날씨, 높은 습도) - 32°C, 습도 78%에 추천하는 음식: 냉면, 샐러드, 빙수/아이스크림"
 *          ```
 *
 * @controller FoodEvaluationController.getEvaluationSummary
 * @path POST /food/evaluate-summary
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getEvaluationSummary(
  connection: IConnection,
  request: getEvaluationSummary.Body,
): Promise<getEvaluationSummary.Output> {
  return true === connection.simulate
    ? getEvaluationSummary.simulate(connection, request)
    : PlainFetcher.fetch(
        {
          ...connection,
          headers: {
            ...connection.headers,
            "Content-Type": "application/json",
          },
        },
        {
          ...getEvaluationSummary.METADATA,
          template: getEvaluationSummary.METADATA.path,
          path: getEvaluationSummary.path(),
        },
        request,
      );
}
export namespace getEvaluationSummary {
  export type Body = IFoodEvaluationRequest;
  export type Output = { summary: string };

  export const METADATA = {
    method: "POST",
    path: "/food/evaluate-summary",
    request: {
      type: "application/json",
      encrypted: false,
    },
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 201,
  } as const;

  export const path = () => "/food/evaluate-summary";
  export const random = (): { summary: string } =>
    typia.random<{ summary: string }>();
  export const simulate = (connection: IConnection, request: Body): Output => {
    const assert = NestiaSimulator.assert({
      method: METADATA.method,
      host: connection.host,
      path: path(),
      contentType: "application/json",
    });
    assert.body(() => typia.assert(request));
    return random();
  };
}
