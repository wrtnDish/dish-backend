/**
 * @packageDocumentation
 * @module api.functional.food.categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
//================================================================
import type { IConnection } from "@nestia/fetcher";
import { PlainFetcher } from "@nestia/fetcher/lib/PlainFetcher";
import typia from "typia";
import { IFoodCategory } from "../../../structures/food/IFoodCategory";

/**
 * 음식 카테고리 목록 조회
 *
 * @description 시스템에서 지원하는 모든 음식 카테고리 정보를 조회합니다.
 *              각 카테고리는 고유 ID, 이름, 제공 온도 등의 정보를 포함합니다.
 *
 *              **포함 정보:**
 *              - 카테고리 ID 및 이름 (영문/한글)
 *              - 제공 온도 (hot/warm/cold/warm & cold)
 *              - 카테고리 설명
 * @summary 음식 카테고리 목록 조회
 * @tag Food
 * @returns 전체 음식 카테고리 목록
 * @example ```typescript
 *          // 모든 음식 카테고리 조회
 *          const categories = await fetch('/food/categories').then(r => r.json());
 *
 *          categories.forEach(category => {
 *          console.log(`${category.id}: ${category.nameKo} (${category.name})`);
 *          console.log(`제공온도: ${category.serveTemp}`);
 *          });
 *          ```
 *
 * @controller FoodEvaluationController.getFoodCategories
 * @path GET /food/categories
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function getFoodCategories(
  connection: IConnection,
): Promise<getFoodCategories.Output> {
  return true === connection.simulate
    ? getFoodCategories.simulate(connection)
    : PlainFetcher.fetch(connection, {
        ...getFoodCategories.METADATA,
        template: getFoodCategories.METADATA.path,
        path: getFoodCategories.path(),
      });
}
export namespace getFoodCategories {
  export type Output = IFoodCategory[];

  export const METADATA = {
    method: "GET",
    path: "/food/categories",
    request: null,
    response: {
      type: "application/json",
      encrypted: false,
    },
    status: 200,
  } as const;

  export const path = () => "/food/categories";
  export const random = (): IFoodCategory[] => typia.random<IFoodCategory[]>();
  export const simulate = (_connection: IConnection): Output => {
    return random();
  };
}
